/* ============================================================== */
/* This file is automatically generated. Please do not modify it. */
/* ============================================================== */

#include <jni.h>
#include "llge.h"

namespace llge
{
	extern "C" DLLEXPORT jint API_CALL llge_ITexture_getId (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jint)((ITexture *)classInstance)->getId();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_ITexture_getTextureInstance (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jlong)((ITexture *)classInstance)->getTextureInstance();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_ITextureImage2d_getTextureImageInstance (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jlong)((ITextureImage2d *)classInstance)->getTextureImageInstance();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_ITextureImage2d_getTexture (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jlong)((ITextureImage2d *)classInstance)->getTexture();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_ITextureImage2d_LoadPixels (JNIEnv * env, jobject object, jlong classInstance, jint width, jint height, jlong format, jlong pixels)
	{
		((ITextureImage2d *)classInstance)->LoadPixels((int)width, (int)height, (TextureImage2dFormat)format, (void *)pixels);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_ITextureImage2d_create (JNIEnv * env, jobject object, jlong classInstance)
	{
		((ITextureImage2d *)classInstance)->create();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_ITextureImage2d_cleanup (JNIEnv * env, jobject object, jlong classInstance)
	{
		((ITextureImage2d *)classInstance)->cleanup();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_ITextureImage2d_dispose (JNIEnv * env, jobject object, jlong classInstance)
	{
		((ITextureImage2d *)classInstance)->dispose();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_IRenderTarget2d_getRenderTargetInstance (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jlong)((IRenderTarget2d *)classInstance)->getRenderTargetInstance();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_IRenderTarget2d_getTexture (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jlong)((IRenderTarget2d *)classInstance)->getTexture();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IRenderTarget2d_create (JNIEnv * env, jobject object, jlong classInstance, jint width, jint height)
	{
		((IRenderTarget2d *)classInstance)->create((int)width, (int)height);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IRenderTarget2d_cleanup (JNIEnv * env, jobject object, jlong classInstance)
	{
		((IRenderTarget2d *)classInstance)->cleanup();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IRenderTarget2d_dispose (JNIEnv * env, jobject object, jlong classInstance)
	{
		((IRenderTarget2d *)classInstance)->dispose();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_IRenderTargetDepth2d_getRenderTargetInstance (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jlong)((IRenderTargetDepth2d *)classInstance)->getRenderTargetInstance();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_IRenderTargetDepth2d_getTexture (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jlong)((IRenderTargetDepth2d *)classInstance)->getTexture();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_IRenderTargetDepth2d_getDepthTexture (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jlong)((IRenderTargetDepth2d *)classInstance)->getDepthTexture();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IRenderTargetDepth2d_create (JNIEnv * env, jobject object, jlong classInstance, jint width, jint height)
	{
		((IRenderTargetDepth2d *)classInstance)->create((int)width, (int)height);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IRenderTargetDepth2d_cleanup (JNIEnv * env, jobject object, jlong classInstance)
	{
		((IRenderTargetDepth2d *)classInstance)->cleanup();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IRenderTargetDepth2d_dispose (JNIEnv * env, jobject object, jlong classInstance)
	{
		((IRenderTargetDepth2d *)classInstance)->dispose();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IUniformsFacade_resetSamplers (JNIEnv * env, jobject object, jlong classInstance)
	{
		((IUniformsFacade *)classInstance)->resetSamplers();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IUniformsFacade_setTime (JNIEnv * env, jobject object, jlong classInstance, jfloat value)
	{
		((IUniformsFacade *)classInstance)->setTime((float)value);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IUniformsFacade_setNormalmap (JNIEnv * env, jobject object, jlong classInstance, jlong texture)
	{
		((IUniformsFacade *)classInstance)->setNormalmap((ITexture *)texture);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IUniformsFacade_setEnvironment (JNIEnv * env, jobject object, jlong classInstance, jlong texture)
	{
		((IUniformsFacade *)classInstance)->setEnvironment((ITexture *)texture);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IUniformsFacade_setDepthmap (JNIEnv * env, jobject object, jlong classInstance, jlong texture)
	{
		((IUniformsFacade *)classInstance)->setDepthmap((ITexture *)texture);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IUniformsFacade_setTexture (JNIEnv * env, jobject object, jlong classInstance, jlong texture)
	{
		((IUniformsFacade *)classInstance)->setTexture((ITexture *)texture);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IUniformsFacade_setLightMap (JNIEnv * env, jobject object, jlong classInstance, jlong texture)
	{
		((IUniformsFacade *)classInstance)->setLightMap((ITexture *)texture);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IUniformsFacade_setProjection (JNIEnv * env, jobject object, jlong classInstance, jlong floatMatrix)
	{
		((IUniformsFacade *)classInstance)->setProjection((void *)floatMatrix);
	}
	
	extern "C" DLLEXPORT jint API_CALL llge_IVertexBuffer_getId (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jint)((IVertexBuffer *)classInstance)->getId();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IVertexBuffer_create (JNIEnv * env, jobject object, jlong classInstance)
	{
		((IVertexBuffer *)classInstance)->create();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IVertexBuffer_setData (JNIEnv * env, jobject object, jlong classInstance, jlong data, jint count)
	{
		((IVertexBuffer *)classInstance)->setData((void *)data, (int)count);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IVertexBuffer_cleanup (JNIEnv * env, jobject object, jlong classInstance)
	{
		((IVertexBuffer *)classInstance)->cleanup();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IVertexBuffer_dispose (JNIEnv * env, jobject object, jlong classInstance)
	{
		((IVertexBuffer *)classInstance)->dispose();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_IGraphicsFacade_getUniforms (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jlong)((IGraphicsFacade *)classInstance)->getUniforms();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IGraphicsFacade_viewport (JNIEnv * env, jobject object, jlong classInstance, jint width, jint height)
	{
		((IGraphicsFacade *)classInstance)->viewport((int)width, (int)height);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IGraphicsFacade_setRenderTarget (JNIEnv * env, jobject object, jlong classInstance, jlong renderTargetInstance)
	{
		((IGraphicsFacade *)classInstance)->setRenderTarget((void *)renderTargetInstance);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IGraphicsFacade_setClearState (JNIEnv * env, jobject object, jlong classInstance, jint color, jfloat depth)
	{
		((IGraphicsFacade *)classInstance)->setClearState((uint)color, (float)depth);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IGraphicsFacade_setBlendMode (JNIEnv * env, jobject object, jlong classInstance, jlong blendMode)
	{
		((IGraphicsFacade *)classInstance)->setBlendMode((BlendMode)blendMode);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IGraphicsFacade_clear (JNIEnv * env, jobject object, jlong classInstance)
	{
		((IGraphicsFacade *)classInstance)->clear();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IGraphicsFacade_clearDepth (JNIEnv * env, jobject object, jlong classInstance)
	{
		((IGraphicsFacade *)classInstance)->clearDepth();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IGraphicsFacade_resetDrawCallsCounter (JNIEnv * env, jobject object, jlong classInstance)
	{
		((IGraphicsFacade *)classInstance)->resetDrawCallsCounter();
	}
	
	extern "C" DLLEXPORT jint API_CALL llge_IGraphicsFacade_getDrawCallsCounterValue (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jint)((IGraphicsFacade *)classInstance)->getDrawCallsCounterValue();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IGraphicsFacade_drawEdges (JNIEnv * env, jobject object, jlong classInstance, jlong effect, jlong vertexFormat, jlong vertices, jint primitivesCount)
	{
		((IGraphicsFacade *)classInstance)->drawEdges((GraphicsEffects)effect, (GraphicsVertexFormats)vertexFormat, (void *)vertices, (int)primitivesCount);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IGraphicsFacade_draw (JNIEnv * env, jobject object, jlong classInstance, jlong effect, jlong vertexFormat, jlong vertices, jint primitivesCount)
	{
		((IGraphicsFacade *)classInstance)->draw((GraphicsEffects)effect, (GraphicsVertexFormats)vertexFormat, (void *)vertices, (int)primitivesCount);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IGraphicsFacade_drawElements (JNIEnv * env, jobject object, jlong classInstance, jlong effect, jlong vertexFormat, jlong vertices, jlong indices, jint primitivesCount)
	{
		((IGraphicsFacade *)classInstance)->drawElements((GraphicsEffects)effect, (GraphicsVertexFormats)vertexFormat, (void *)vertices, (void *)indices, (int)primitivesCount);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IGraphicsFacade_drawVertexBuffer (JNIEnv * env, jobject object, jlong classInstance, jlong effect, jlong vertexFormat, jlong vertexBuffer, jlong indices, jint primitivesCount)
	{
		((IGraphicsFacade *)classInstance)->drawVertexBuffer((GraphicsEffects)effect, (GraphicsVertexFormats)vertexFormat, (IVertexBuffer *)vertexBuffer, (void *)indices, (int)primitivesCount);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IGraphicsFacade_setEffectConstantFloat (JNIEnv * env, jobject object, jlong classInstance, jlong effect, jlong name, jfloat value)
	{
		((IGraphicsFacade *)classInstance)->setEffectConstantFloat((GraphicsEffects)effect, (char *)name, (float)value);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IGraphicsFacade_setEffectConstantColor (JNIEnv * env, jobject object, jlong classInstance, jlong effect, jlong name, jint value)
	{
		((IGraphicsFacade *)classInstance)->setEffectConstantColor((GraphicsEffects)effect, (char *)name, (uint)value);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IGraphicsFacade_create (JNIEnv * env, jobject object, jlong classInstance)
	{
		((IGraphicsFacade *)classInstance)->create();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IGraphicsFacade_grabDefaultRenderTarget (JNIEnv * env, jobject object, jlong classInstance)
	{
		((IGraphicsFacade *)classInstance)->grabDefaultRenderTarget();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IGraphicsFacade_cleanup (JNIEnv * env, jobject object, jlong classInstance)
	{
		((IGraphicsFacade *)classInstance)->cleanup();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IGraphicsFacade_dispose (JNIEnv * env, jobject object, jlong classInstance)
	{
		((IGraphicsFacade *)classInstance)->dispose();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_IGraphicsFactory_createGraphicsFacade (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jlong)((IGraphicsFactory *)classInstance)->createGraphicsFacade();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_IGraphicsFactory_createTextureImage2d (JNIEnv * env, jobject object, jlong classInstance, jboolean generateMipmaps, jboolean useFilter)
	{
		return (jlong)((IGraphicsFactory *)classInstance)->createTextureImage2d((bool)generateMipmaps, (bool)useFilter);
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_IGraphicsFactory_createRenderTarget2d (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jlong)((IGraphicsFactory *)classInstance)->createRenderTarget2d();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_IGraphicsFactory_createRenderTargetDepth2d (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jlong)((IGraphicsFactory *)classInstance)->createRenderTargetDepth2d();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_IGraphicsFactory_createVertexBuffer (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jlong)((IGraphicsFactory *)classInstance)->createVertexBuffer();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IGraphicsFactory_dispose (JNIEnv * env, jobject object, jlong classInstance)
	{
		((IGraphicsFactory *)classInstance)->dispose();
	}
	
	extern "C" DLLEXPORT jint API_CALL llge_IQuadTree_insert (JNIEnv * env, jobject object, jlong classInstance, jfloat minX, jfloat minY, jfloat maxX, jfloat maxY, jint userData)
	{
		return (jint)((IQuadTree *)classInstance)->insert((float)minX, (float)minY, (float)maxX, (float)maxY, (int)userData);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IQuadTree_remove (JNIEnv * env, jobject object, jlong classInstance, jint id)
	{
		((IQuadTree *)classInstance)->remove((int)id);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IQuadTree_query (JNIEnv * env, jobject object, jlong classInstance, jfloat minX, jfloat minY, jfloat maxX, jfloat maxY)
	{
		((IQuadTree *)classInstance)->query((float)minX, (float)minY, (float)maxX, (float)maxY);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IQuadTree_getQueryResults (JNIEnv * env, jobject object, jlong classInstance, jlong intBuffer)
	{
		((IQuadTree *)classInstance)->getQueryResults((void *)intBuffer);
	}
	
	extern "C" DLLEXPORT jint API_CALL llge_IQuadTree_getQueryResultsCount (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jint)((IQuadTree *)classInstance)->getQueryResultsCount();
	}
	
	extern "C" DLLEXPORT jint API_CALL llge_IQuadTree_getIterationsCount (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jint)((IQuadTree *)classInstance)->getIterationsCount();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IQuadTree_dispose (JNIEnv * env, jobject object, jlong classInstance)
	{
		((IQuadTree *)classInstance)->dispose();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_IGeometryFactory_createQuadTree (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jlong)((IGeometryFactory *)classInstance)->createQuadTree();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IGeometryFactory_dispose (JNIEnv * env, jobject object, jlong classInstance)
	{
		((IGeometryFactory *)classInstance)->dispose();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IAabb2d_update (JNIEnv * env, jobject object, jlong classInstance, jfloat minX, jfloat minY, jfloat maxX, jfloat maxY, jfloat zOrder)
	{
		((IAabb2d *)classInstance)->update((float)minX, (float)minY, (float)maxX, (float)maxY, (float)zOrder);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IRender2d_setMeshesCount (JNIEnv * env, jobject object, jlong classInstance, jint meshesCount)
	{
		((IRender2d *)classInstance)->setMeshesCount((int)meshesCount);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IRender2d_setMesh (JNIEnv * env, jobject object, jlong classInstance, jint meshIndex, jlong texture, jlong vertices, jint verticesCount, jlong indices, jint indicesCount)
	{
		((IRender2d *)classInstance)->setMesh((int)meshIndex, (ITexture *)texture, (void *)vertices, (int)verticesCount, (void *)indices, (int)indicesCount);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IMatrixTransform_setTransform (JNIEnv * env, jobject object, jlong classInstance, jlong floatMatrix)
	{
		((IMatrixTransform *)classInstance)->setTransform((void *)floatMatrix);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_ITransform2d_setWorldPosition (JNIEnv * env, jobject object, jlong classInstance, jfloat x, jfloat y, jfloat z)
	{
		((ITransform2d *)classInstance)->setWorldPosition((float)x, (float)y, (float)z);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_ITransform2d_setWorldRotation (JNIEnv * env, jobject object, jlong classInstance, jfloat value)
	{
		((ITransform2d *)classInstance)->setWorldRotation((float)value);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_ITransform2d_setWorldScale (JNIEnv * env, jobject object, jlong classInstance, jfloat value)
	{
		((ITransform2d *)classInstance)->setWorldScale((float)value);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_ITransform2d_setLocalPivot (JNIEnv * env, jobject object, jlong classInstance, jfloat x, jfloat y, jfloat z)
	{
		((ITransform2d *)classInstance)->setLocalPivot((float)x, (float)y, (float)z);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_ITransform2d_setLocalPosition (JNIEnv * env, jobject object, jlong classInstance, jfloat x, jfloat y, jfloat z)
	{
		((ITransform2d *)classInstance)->setLocalPosition((float)x, (float)y, (float)z);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_ITransform2d_setLocalRotation (JNIEnv * env, jobject object, jlong classInstance, jfloat value)
	{
		((ITransform2d *)classInstance)->setLocalRotation((float)value);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_ITransform2d_setLocalScale (JNIEnv * env, jobject object, jlong classInstance, jfloat value)
	{
		((ITransform2d *)classInstance)->setLocalScale((float)value);
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_IEntity_getSelfInstance (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jlong)((IEntity *)classInstance)->getSelfInstance();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IEntity_setComponents (JNIEnv * env, jobject object, jlong classInstance, jlong types)
	{
		((IEntity *)classInstance)->setComponents((ComponentsTypes)types);
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_IEntity_getAabb2d (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jlong)((IEntity *)classInstance)->getAabb2d();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_IEntity_getRender2d (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jlong)((IEntity *)classInstance)->getRender2d();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_IEntity_getTransform2d (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jlong)((IEntity *)classInstance)->getTransform2d();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_IEntity_getMatrixTransform (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jlong)((IEntity *)classInstance)->getMatrixTransform();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IEntity_dispose (JNIEnv * env, jobject object, jlong classInstance)
	{
		((IEntity *)classInstance)->dispose();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_ICamera_setPosition (JNIEnv * env, jobject object, jlong classInstance, jfloat x, jfloat y, jfloat z)
	{
		((ICamera *)classInstance)->setPosition((float)x, (float)y, (float)z);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_ICamera_setFov (JNIEnv * env, jobject object, jlong classInstance, jfloat fov)
	{
		((ICamera *)classInstance)->setFov((float)fov);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_ICamera_setAspect (JNIEnv * env, jobject object, jlong classInstance, jfloat aspect)
	{
		((ICamera *)classInstance)->setAspect((float)aspect);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_ICamera_setRotation (JNIEnv * env, jobject object, jlong classInstance, jfloat rotationZ)
	{
		((ICamera *)classInstance)->setRotation((float)rotationZ);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_ICamera_setPlanes (JNIEnv * env, jobject object, jlong classInstance, jfloat zn, jfloat zf)
	{
		((ICamera *)classInstance)->setPlanes((float)zn, (float)zf);
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_IEntitiesWorld_getCamera (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jlong)((IEntitiesWorld *)classInstance)->getCamera();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IEntitiesWorld_setUnpdateBounds (JNIEnv * env, jobject object, jlong classInstance, jfloat minX, jfloat minY, jfloat maxX, jfloat maxY)
	{
		((IEntitiesWorld *)classInstance)->setUnpdateBounds((float)minX, (float)minY, (float)maxX, (float)maxY);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IEntitiesWorld_setRenderBounds (JNIEnv * env, jobject object, jlong classInstance, jfloat minX, jfloat minY, jfloat maxX, jfloat maxY)
	{
		((IEntitiesWorld *)classInstance)->setRenderBounds((float)minX, (float)minY, (float)maxX, (float)maxY);
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_IEntitiesWorld_createEntity (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jlong)((IEntitiesWorld *)classInstance)->createEntity();
	}
	
	extern "C" DLLEXPORT jint API_CALL llge_IEntitiesWorld_update (JNIEnv * env, jobject object, jlong classInstance, jfloat elapsed)
	{
		return (jint)((IEntitiesWorld *)classInstance)->update((float)elapsed);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IEntitiesWorld_updateEntity (JNIEnv * env, jobject object, jlong classInstance, jlong entity, jlong types)
	{
		((IEntitiesWorld *)classInstance)->updateEntity((IEntity *)entity, (ComponentsTypes)types);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IEntitiesWorld_addEntity (JNIEnv * env, jobject object, jlong classInstance, jlong entity)
	{
		((IEntitiesWorld *)classInstance)->addEntity((IEntity *)entity);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IEntitiesWorld_removeEntity (JNIEnv * env, jobject object, jlong classInstance, jlong entity)
	{
		((IEntitiesWorld *)classInstance)->removeEntity((IEntity *)entity);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IEntitiesWorld_dispose (JNIEnv * env, jobject object, jlong classInstance)
	{
		((IEntitiesWorld *)classInstance)->dispose();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IEntitiesWorld_clear (JNIEnv * env, jobject object, jlong classInstance)
	{
		((IEntitiesWorld *)classInstance)->clear();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_IEntitiesFactory_createEntitiesWorld (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jlong)((IEntitiesFactory *)classInstance)->createEntitiesWorld();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IEntitiesFactory_dispose (JNIEnv * env, jobject object, jlong classInstance)
	{
		((IEntitiesFactory *)classInstance)->dispose();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_IBatch2d_getNativeInstance (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jlong)((IBatch2d *)classInstance)->getNativeInstance();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IBatch2d_addProjection (JNIEnv * env, jobject object, jlong classInstance, jlong floatMatrix)
	{
		((IBatch2d *)classInstance)->addProjection((void *)floatMatrix);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IBatch2d_startBatch (JNIEnv * env, jobject object, jlong classInstance)
	{
		((IBatch2d *)classInstance)->startBatch();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IBatch2d_finishBatch (JNIEnv * env, jobject object, jlong classInstance)
	{
		((IBatch2d *)classInstance)->finishBatch();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IBatch2d_setToneMap (JNIEnv * env, jobject object, jlong classInstance, jint tonemapId)
	{
		((IBatch2d *)classInstance)->setToneMap((uint)tonemapId);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IBatch2d_draw (JNIEnv * env, jobject object, jlong classInstance, jlong effect, jlong blendMode, jlong textureId, jint lightmapId, jlong vertices, jint verticesCount, jlong indices, jint indicesCount)
	{
		((IBatch2d *)classInstance)->draw((GraphicsEffects)effect, (BlendMode)blendMode, (ITexture *)textureId, (uint)lightmapId, (void *)vertices, (int)verticesCount, (void *)indices, (int)indicesCount);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IBatch2d_execute (JNIEnv * env, jobject object, jlong classInstance, jboolean usePostProcess)
	{
		((IBatch2d *)classInstance)->execute((bool)usePostProcess);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_ISpineSkeleton_setTransform (JNIEnv * env, jobject object, jlong classInstance, jlong floatMatrix)
	{
		((ISpineSkeleton *)classInstance)->setTransform((void *)floatMatrix);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_ISpineSkeleton_setColor (JNIEnv * env, jobject object, jlong classInstance, jint color)
	{
		((ISpineSkeleton *)classInstance)->setColor((uint)color);
	}
	
	extern "C" DLLEXPORT jfloat API_CALL llge_ISpineSkeleton_getMinX (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jfloat)((ISpineSkeleton *)classInstance)->getMinX();
	}
	
	extern "C" DLLEXPORT jfloat API_CALL llge_ISpineSkeleton_getMinY (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jfloat)((ISpineSkeleton *)classInstance)->getMinY();
	}
	
	extern "C" DLLEXPORT jfloat API_CALL llge_ISpineSkeleton_getMaxX (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jfloat)((ISpineSkeleton *)classInstance)->getMaxX();
	}
	
	extern "C" DLLEXPORT jfloat API_CALL llge_ISpineSkeleton_getMaxY (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jfloat)((ISpineSkeleton *)classInstance)->getMaxY();
	}
	
	extern "C" DLLEXPORT jfloat API_CALL llge_ISpineSkeleton_getZ (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jfloat)((ISpineSkeleton *)classInstance)->getZ();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_ISpineSkeleton_render (JNIEnv * env, jobject object, jlong classInstance, jlong batch, jint lightmapId)
	{
		((ISpineSkeleton *)classInstance)->render((IBatch2d *)batch, (int)lightmapId);
	}
	
	extern "C" DLLEXPORT jint API_CALL llge_ISpineSkeleton_getGeometry (JNIEnv * env, jobject object, jlong classInstance, jlong vertices, jint verticeLimit, jlong indices, jint indicesLimit)
	{
		return (jint)((ISpineSkeleton *)classInstance)->getGeometry((void *)vertices, (int)verticeLimit, (void *)indices, (int)indicesLimit);
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_ISpineSkeleton_getNativeInstance (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jlong)((ISpineSkeleton *)classInstance)->getNativeInstance();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_ISpineSkeleton_updateWorldTransform (JNIEnv * env, jobject object, jlong classInstance)
	{
		((ISpineSkeleton *)classInstance)->updateWorldTransform();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_ISpineSkeleton_setBonesToSetupPose (JNIEnv * env, jobject object, jlong classInstance)
	{
		((ISpineSkeleton *)classInstance)->setBonesToSetupPose();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_ISpineSkeleton_setSlotsToSetupPose (JNIEnv * env, jobject object, jlong classInstance)
	{
		((ISpineSkeleton *)classInstance)->setSlotsToSetupPose();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_ISpineSkeleton_dispose (JNIEnv * env, jobject object, jlong classInstance)
	{
		((ISpineSkeleton *)classInstance)->dispose();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_ISpineAnimation_getNativeInstance (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jlong)((ISpineAnimation *)classInstance)->getNativeInstance();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_ISpineAnimation_getName (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jlong)((ISpineAnimation *)classInstance)->getName();
	}
	
	extern "C" DLLEXPORT jfloat API_CALL llge_ISpineAnimation_getDuration (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jfloat)((ISpineAnimation *)classInstance)->getDuration();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_ISpineAnimationState_update (JNIEnv * env, jobject object, jlong classInstance, jfloat delta)
	{
		((ISpineAnimationState *)classInstance)->update((float)delta);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_ISpineAnimationState_apply (JNIEnv * env, jobject object, jlong classInstance, jlong skeleton)
	{
		((ISpineAnimationState *)classInstance)->apply((ISpineSkeleton *)skeleton);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_ISpineAnimationState_setAnimation (JNIEnv * env, jobject object, jlong classInstance, jlong animation, jboolean loop, jboolean normalize)
	{
		((ISpineAnimationState *)classInstance)->setAnimation((ISpineAnimation *)animation, (bool)loop, (bool)normalize);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_ISpineAnimationState_addAnimation (JNIEnv * env, jobject object, jlong classInstance, jlong animation, jboolean loop, jfloat delay)
	{
		((ISpineAnimationState *)classInstance)->addAnimation((ISpineAnimation *)animation, (bool)loop, (float)delay);
	}
	
	extern "C" DLLEXPORT jint API_CALL llge_ISpineAnimationState_getSpineEventIndices (JNIEnv * env, jobject object, jlong classInstance, jlong indices, jint limit)
	{
		return (jint)((ISpineAnimationState *)classInstance)->getSpineEventIndices((IntPtr)indices, (int)limit);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_ISpineAnimationState_dispose (JNIEnv * env, jobject object, jlong classInstance)
	{
		((ISpineAnimationState *)classInstance)->dispose();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_ISpineAnimationStateData_setMix (JNIEnv * env, jobject object, jlong classInstance, jlong from, jlong to, jfloat time)
	{
		((ISpineAnimationStateData *)classInstance)->setMix((ISpineAnimation *)from, (ISpineAnimation *)to, (float)time);
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_ISpineAnimationStateData_createState (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jlong)((ISpineAnimationStateData *)classInstance)->createState();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_ISpineAnimationStateData_dispose (JNIEnv * env, jobject object, jlong classInstance)
	{
		((ISpineAnimationStateData *)classInstance)->dispose();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_ISpineEvent_getName (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jlong)((ISpineEvent *)classInstance)->getName();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_ISpineResource_load (JNIEnv * env, jobject object, jlong classInstance, jstring atlasText, jstring jsonText, jstring dir)
	{
		const char *str_atlasText = env->GetStringUTFChars(atlasText, JNI_FALSE);const char *str_jsonText = env->GetStringUTFChars(jsonText, JNI_FALSE);const char *str_dir = env->GetStringUTFChars(dir, JNI_FALSE);((ISpineResource *)classInstance)->load((String)str_atlasText, (String)str_jsonText, (String)str_dir);env->ReleaseStringUTFChars(atlasText, str_atlasText);env->ReleaseStringUTFChars(jsonText, str_jsonText);env->ReleaseStringUTFChars(dir, str_dir);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_ISpineResource_unLoad (JNIEnv * env, jobject object, jlong classInstance)
	{
		((ISpineResource *)classInstance)->unLoad();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_ISpineResource_getSpineAnimation (JNIEnv * env, jobject object, jlong classInstance, jint i)
	{
		return (jlong)((ISpineResource *)classInstance)->getSpineAnimation((int)i);
	}
	
	extern "C" DLLEXPORT jint API_CALL llge_ISpineResource_getSpineAnimationsCount (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jint)((ISpineResource *)classInstance)->getSpineAnimationsCount();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_ISpineResource_getSpineEvent (JNIEnv * env, jobject object, jlong classInstance, jint i)
	{
		return (jlong)((ISpineResource *)classInstance)->getSpineEvent((int)i);
	}
	
	extern "C" DLLEXPORT jint API_CALL llge_ISpineResource_getSpineEventsCount (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jint)((ISpineResource *)classInstance)->getSpineEventsCount();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_ISpineResource_createSkeleton (JNIEnv * env, jobject object, jlong classInstance, jlong floatMatrix)
	{
		return (jlong)((ISpineResource *)classInstance)->createSkeleton((void *)floatMatrix);
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_ISpineResource_createStateData (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jlong)((ISpineResource *)classInstance)->createStateData();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_ISpineResource_dispose (JNIEnv * env, jobject object, jlong classInstance)
	{
		((ISpineResource *)classInstance)->dispose();
	}
	
	extern "C" DLLEXPORT jint API_CALL llge_INativeMemoryProfiler_getTexturesSize (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jint)((INativeMemoryProfiler *)classInstance)->getTexturesSize();
	}
	
	extern "C" DLLEXPORT jint API_CALL llge_INativeMemoryProfiler_getAllocationsSize (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jint)((INativeMemoryProfiler *)classInstance)->getAllocationsSize();
	}
	
	extern "C" DLLEXPORT jint API_CALL llge_INativeMemoryProfiler_getHeapSize (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jint)((INativeMemoryProfiler *)classInstance)->getHeapSize();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_ITextureBuffer2d_getFormat (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jlong)((ITextureBuffer2d *)classInstance)->getFormat();
	}
	
	extern "C" DLLEXPORT jint API_CALL llge_ITextureBuffer2d_getWidth (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jint)((ITextureBuffer2d *)classInstance)->getWidth();
	}
	
	extern "C" DLLEXPORT jint API_CALL llge_ITextureBuffer2d_getHeight (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jint)((ITextureBuffer2d *)classInstance)->getHeight();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_ITextureBuffer2d_getPixels (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jlong)((ITextureBuffer2d *)classInstance)->getPixels();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IContentAtlasMap_resetMap (JNIEnv * env, jobject object, jlong classInstance)
	{
		((IContentAtlasMap *)classInstance)->resetMap();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IContentAtlasMap_addRect (JNIEnv * env, jobject object, jlong classInstance, jlong name, jint pageIndex, jint x, jint y, jint width, jint height)
	{
		((IContentAtlasMap *)classInstance)->addRect((char *)name, (int)pageIndex, (int)x, (int)y, (int)width, (int)height);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IContentAtlasMap_loadTextures (JNIEnv * env, jobject object, jlong classInstance)
	{
		((IContentAtlasMap *)classInstance)->loadTextures();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_IContentManager_getContentAtlasMap (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jlong)((IContentManager *)classInstance)->getContentAtlasMap();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IContentManager_replaceSeparator (JNIEnv * env, jobject object, jlong classInstance, jboolean value)
	{
		((IContentManager *)classInstance)->replaceSeparator((bool)value);
	}
	
	extern "C" DLLEXPORT jint API_CALL llge_IContentManager_registerImage (JNIEnv * env, jobject object, jlong classInstance, jlong name)
	{
		return (jint)((IContentManager *)classInstance)->registerImage((char *)name);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IContentManager_startLoad (JNIEnv * env, jobject object, jlong classInstance)
	{
		((IContentManager *)classInstance)->startLoad();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IContentManager_loadImage (JNIEnv * env, jobject object, jlong classInstance, jint id, jlong textureImage)
	{
		((IContentManager *)classInstance)->loadImage((int)id, (ITextureImage2d *)textureImage);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IContentManager_reloadImages (JNIEnv * env, jobject object, jlong classInstance)
	{
		((IContentManager *)classInstance)->reloadImages();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_IContentManager_loadBuffer (JNIEnv * env, jobject object, jlong classInstance, jint id)
	{
		return (jlong)((IContentManager *)classInstance)->loadBuffer((int)id);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IContentManager_finishLoad (JNIEnv * env, jobject object, jlong classInstance)
	{
		((IContentManager *)classInstance)->finishLoad();
	}
	
	extern "C" DLLEXPORT jboolean API_CALL llge_IContentManager_update (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jboolean)((IContentManager *)classInstance)->update();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IContentManager_dispose (JNIEnv * env, jobject object, jlong classInstance)
	{
		((IContentManager *)classInstance)->dispose();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IObbContentProvider_openObbFile (JNIEnv * env, jobject object, jlong classInstance, const jlong obbFile)
	{
		((IObbContentProvider *)classInstance)->openObbFile((const char *)obbFile);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IObbContentProvider_closeObbFile (JNIEnv * env, jobject object, jlong classInstance)
	{
		((IObbContentProvider *)classInstance)->closeObbFile();
	}
	
	extern "C" DLLEXPORT jboolean API_CALL llge_IObbContentProvider_existsContent (JNIEnv * env, jobject object, jlong classInstance, const jlong name)
	{
		return (jboolean)((IObbContentProvider *)classInstance)->existsContent((const char *)name);
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IObbContentProvider_openContent (JNIEnv * env, jobject object, jlong classInstance, const jlong name)
	{
		((IObbContentProvider *)classInstance)->openContent((const char *)name);
	}
	
	extern "C" DLLEXPORT jint API_CALL llge_IObbContentProvider_read (JNIEnv * env, jobject object, jlong classInstance, jlong buffer, jint bytesLimit)
	{
		return (jint)((IObbContentProvider *)classInstance)->read((void *)buffer, (int)bytesLimit);
	}
	
	extern "C" DLLEXPORT jint API_CALL llge_IObbContentProvider_getContentSize (JNIEnv * env, jobject object, jlong classInstance)
	{
		return (jint)((IObbContentProvider *)classInstance)->getContentSize();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_IObbContentProvider_closeContent (JNIEnv * env, jobject object, jlong classInstance)
	{
		((IObbContentProvider *)classInstance)->closeContent();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_createBatch2d (JNIEnv * env, jobject object)
	{
		return (jlong)createBatch2d();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_createTextureByID (JNIEnv * env, jobject object, jint id)
	{
		return (jlong)createTextureByID((uint)id);
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_createContentManager (JNIEnv * env, jobject object)
	{
		return (jlong)createContentManager();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_createContentProvider (JNIEnv * env, jobject object)
	{
		return (jlong)createContentProvider();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_createEntitiesFactory (JNIEnv * env, jobject object)
	{
		return (jlong)createEntitiesFactory();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_createGraphicsFactory (JNIEnv * env, jobject object)
	{
		return (jlong)createGraphicsFactory();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_createGeometryFactory (JNIEnv * env, jobject object)
	{
		return (jlong)createGeometryFactory();
	}
	
	extern "C" DLLEXPORT void API_CALL llge_initRenderContext (JNIEnv * env, jobject object)
	{
		initRenderContext();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_createNativeMemoryProfiler (JNIEnv * env, jobject object)
	{
		return (jlong)createNativeMemoryProfiler();
	}
	
	extern "C" DLLEXPORT jlong API_CALL llge_createSpineResource (JNIEnv * env, jobject object)
	{
		return (jlong)createSpineResource();
	}
	
}

