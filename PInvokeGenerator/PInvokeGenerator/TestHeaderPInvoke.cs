/* ============================================================== */
/* This file is automatically generated. Please do not modify it. */
/* ============================================================== */

using System;
using System.Runtime.InteropServices;

namespace Test
{
	public class Version
	{
		public const string Dll = "TestDll.dll";
	}
	
	[StructLayout(LayoutKind.Sequential)]
	public struct Vector2
	{
		public float x;
		public float y;
	}
	
	[StructLayout(LayoutKind.Sequential)]
	public struct Vector3
	{
		public float x;
		public float y;
		public float z;
	}
	
	[StructLayout(LayoutKind.Sequential)]
	public struct Vector4
	{
		public float x;
		public float y;
		public float z;
		public float w;
	}
	
	public class UpdateArgs
	{
		public IntPtr ClassInstance;
		public float GetElapsedTime ()
		{
			return Test_UpdateArgs_getElapsedTime(ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private float Test_UpdateArgs_getElapsedTime (IntPtr classInstance);
		public void SetElapsedTime (float value)
		{
			Test_UpdateArgs_setElapsedTime(ClassInstance, value);
		}
		
		[DllImport(Version.Dll)]
		static extern private void Test_UpdateArgs_setElapsedTime (IntPtr classInstance, float value);
	}
	
	public class TestSystem
	{
		public IntPtr ClassInstance;
		public void Update (UpdateArgs args)
		{
			Test_TestSystem_update(ClassInstance, args.ClassInstance);
		}
		
		[DllImport(Version.Dll)]
		static extern private void Test_TestSystem_update (IntPtr classInstance, IntPtr args);
	}
	
	public class TestFactory
	{
		public IntPtr ClassInstance;
		public TestSystem CreateTestSystem ()
		{
			return new TestSystem{ ClassInstance = Test_TestFactory_createTestSystem(ClassInstance) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr Test_TestFactory_createTestSystem (IntPtr classInstance);
		public UpdateArgs CreateUpdateArgs ()
		{
			return new UpdateArgs{ ClassInstance = Test_TestFactory_createUpdateArgs(ClassInstance) };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr Test_TestFactory_createUpdateArgs (IntPtr classInstance);
	}
	
	public class TestDll
	{
		static public TestFactory CreateTestFactory ()
		{
			return new TestFactory{ ClassInstance = createTestFactory() };
		}
		
		[DllImport(Version.Dll)]
		static extern private IntPtr createTestFactory ();
	}
	
}

